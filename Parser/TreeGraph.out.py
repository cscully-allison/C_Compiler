from anytree import Node, RenderTree 
from anytree.exporter import DotExporter
PassUpNode140341914343504 = Node('TranslationUnit_3504')
PassUpNode140341914344912 = Node('ExternalDeclaration_4912', parent=PassUpNode140341914343504)
FunctionDefintion140341914248400 = Node('FunctionDefintion_8400', parent=PassUpNode140341914344912)
DeclarationSpecifiers140341917035600 = Node('DeclarationSpecifiers_5600', parent=FunctionDefintion140341914248400)
leaf = Node('int_5600', parent=DeclarationSpecifiers140341917035600)
PassUpNode140341917051152 = Node('Declarator_1152', parent=FunctionDefintion140341914248400)
PassUpNode140341914248272 = Node('DirectDeclarator_8272', parent=PassUpNode140341917051152)
PassUpNode140341917035472 = Node('DirectDeclarator_5472', parent=PassUpNode140341914248272)
Identifier140341917035664 = Node('Identifier_5664', parent=PassUpNode140341917035472)
leaf = Node('main_5664', parent=Identifier140341917035664)
leaf = Node("TokenLocation=(3, 6, 5)", parent=Identifier140341917035664)
CompoundStatement140341914248336 = Node('CompoundStatement_8336', parent=FunctionDefintion140341914248400)
DeclList140341914313040 = Node('DeclList_3040', parent=CompoundStatement140341914248336)
DeclList140341914248656 = Node('DeclList_8656', parent=DeclList140341914313040)
Declaration140341914248848 = Node('Declaration_8848', parent=DeclList140341914248656)
DeclarationSpecifiers140341914248528 = Node('DeclarationSpecifiers_8528', parent=Declaration140341914248848)
leaf = Node('int_8528', parent=DeclarationSpecifiers140341914248528)
InitDeclList140341914248784 = Node('InitDeclList_8784', parent=Declaration140341914248848)
PassUpNode140341914248720 = Node('Declarator_8720', parent=InitDeclList140341914248784)
PassUpNode140341914248592 = Node('DirectDeclarator_8592', parent=PassUpNode140341914248720)
Identifier140341914248464 = Node('Identifier_8464', parent=PassUpNode140341914248592)
leaf = Node('a_8464', parent=Identifier140341914248464)
leaf = Node("Type=['int'], TokenLocation=(4, 19, 6)", parent=Identifier140341914248464)
Declaration140341914313104 = Node('Declaration_3104', parent=DeclList140341914313040)
DeclarationSpecifiers140341914248976 = Node('DeclarationSpecifiers_8976', parent=Declaration140341914313104)
leaf = Node('int_8976', parent=DeclarationSpecifiers140341914248976)
InitDeclList140341914250576 = Node('InitDeclList_0576', parent=Declaration140341914313104)
PassUpNode140341914250384 = Node('Declarator_0384', parent=InitDeclList140341914250576)
ArrayDeclaration140341914312976 = Node('ArrayDeclaration_2976', parent=PassUpNode140341914250384)
ArrayDeclaration140341914250320 = Node('ArrayDeclaration_0320', parent=ArrayDeclaration140341914312976)
PassUpNode140341914249040 = Node('DirectDeclarator_9040', parent=ArrayDeclaration140341914250320)
Identifier140341914248912 = Node('Identifier_8912', parent=PassUpNode140341914249040)
leaf = Node('arr_8912', parent=Identifier140341914248912)
leaf = Node("Array Size=['6', '8'], Subtype='Array', Type=['int'], TokenLocation=(5, 27, 6)", parent=Identifier140341914248912)
PassUpNode140341914250256 = Node('ConstantExpression_0256', parent=ArrayDeclaration140341914250320)
PassUpNode140341914250192 = Node('ConditionalExpression_0192', parent=PassUpNode140341914250256)
PassUpNode140341914250128 = Node('LogicalOrExpression_0128', parent=PassUpNode140341914250192)
PassUpNode140341914250064 = Node('LogicalAndExpression_0064', parent=PassUpNode140341914250128)
PassUpNode140341914250000 = Node('InclusiveOrExpression_0000', parent=PassUpNode140341914250064)
PassUpNode140341914249936 = Node('ExclusiveOrExpression_9936', parent=PassUpNode140341914250000)
PassUpNode140341914249872 = Node('AndExpression_9872', parent=PassUpNode140341914249936)
PassUpNode140341914249808 = Node('EqalityExpression_9808', parent=PassUpNode140341914249872)
PassUpNode140341914249744 = Node('ShiftExpression_9744', parent=PassUpNode140341914249808)
PassUpNode140341914249680 = Node('ShiftExpression_9680', parent=PassUpNode140341914249744)
PassUpNode140341914249616 = Node('AdditiveExpression_9616', parent=PassUpNode140341914249680)
PassUpNode140341914249552 = Node('MultiplicativeExpression_9552', parent=PassUpNode140341914249616)
PassUpNode140341914249488 = Node('CastExpression_9488', parent=PassUpNode140341914249552)
PassUpNode140341914249424 = Node('UnaryExpression_9424', parent=PassUpNode140341914249488)
PassUpNode140341914249360 = Node('PostfixExpression_9360', parent=PassUpNode140341914249424)
PrimaryExpression140341914249232 = Node('PrimaryExpression_9232', parent=PassUpNode140341914249360)
Constant140341914249168 = Node('Constant_9168', parent=PrimaryExpression140341914249232)
leaf = Node('6_9168', parent=Constant140341914249168)
PassUpNode140341914312912 = Node('ConstantExpression_2912', parent=ArrayDeclaration140341914312976)
PassUpNode140341914312848 = Node('ConditionalExpression_2848', parent=PassUpNode140341914312912)
PassUpNode140341914312784 = Node('LogicalOrExpression_2784', parent=PassUpNode140341914312848)
PassUpNode140341914251216 = Node('LogicalAndExpression_1216', parent=PassUpNode140341914312784)
PassUpNode140341914251152 = Node('InclusiveOrExpression_1152', parent=PassUpNode140341914251216)
PassUpNode140341914251088 = Node('ExclusiveOrExpression_1088', parent=PassUpNode140341914251152)
PassUpNode140341914251024 = Node('AndExpression_1024', parent=PassUpNode140341914251088)
PassUpNode140341914250960 = Node('EqalityExpression_0960', parent=PassUpNode140341914251024)
PassUpNode140341914250896 = Node('ShiftExpression_0896', parent=PassUpNode140341914250960)
PassUpNode140341914250832 = Node('ShiftExpression_0832', parent=PassUpNode140341914250896)
PassUpNode140341914250768 = Node('AdditiveExpression_0768', parent=PassUpNode140341914250832)
PassUpNode140341914250704 = Node('MultiplicativeExpression_0704', parent=PassUpNode140341914250768)
PassUpNode140341914250640 = Node('CastExpression_0640', parent=PassUpNode140341914250704)
PassUpNode140341914250448 = Node('UnaryExpression_0448', parent=PassUpNode140341914250640)
PassUpNode140341914249296 = Node('PostfixExpression_9296', parent=PassUpNode140341914250448)
PrimaryExpression140341914250512 = Node('PrimaryExpression_0512', parent=PassUpNode140341914249296)
Constant140341914249104 = Node('Constant_9104', parent=PrimaryExpression140341914250512)
leaf = Node('8_9104', parent=Constant140341914249104)
PassUpNode140341914343632 = Node('StatementList_3632', parent=CompoundStatement140341914248336)
PassUpNode140341914343440 = Node('StatementList_3440', parent=PassUpNode140341914343632)
PassUpNode140341914314704 = Node('StatementList_4704', parent=PassUpNode140341914343440)
PassUpNode140341914313616 = Node('Statement_3616', parent=PassUpNode140341914314704)
PassUpNode140341914314640 = Node('Expression_4640', parent=PassUpNode140341914313616)
AssignmentExpression140341914314576 = Node('AssignmentExpression_4576', parent=PassUpNode140341914314640)
PassUpNode140341914313424 = Node('UnaryExpression_3424', parent=AssignmentExpression140341914314576)
PassUpNode140341914313360 = Node('PostfixExpression_3360', parent=PassUpNode140341914313424)
PrimaryExpression140341914313232 = Node('PrimaryExpression_3232', parent=PassUpNode140341914313360)
Identifier140341914313168 = Node('Identifier_3168', parent=PrimaryExpression140341914313232)
leaf = Node('a_3168', parent=Identifier140341914313168)
leaf = Node("Type=['int'], TokenLocation=(4, 19, 6)", parent=Identifier140341914313168)
PassUpNode140341914314512 = Node('AssignmentExpression_4512', parent=AssignmentExpression140341914314576)
PassUpNode140341914314448 = Node('ConditionalExpression_4448', parent=PassUpNode140341914314512)
PassUpNode140341914314384 = Node('LogicalOrExpression_4384', parent=PassUpNode140341914314448)
PassUpNode140341914314320 = Node('LogicalAndExpression_4320', parent=PassUpNode140341914314384)
PassUpNode140341914314256 = Node('InclusiveOrExpression_4256', parent=PassUpNode140341914314320)
PassUpNode140341914314192 = Node('ExclusiveOrExpression_4192', parent=PassUpNode140341914314256)
PassUpNode140341914314128 = Node('AndExpression_4128', parent=PassUpNode140341914314192)
PassUpNode140341914314064 = Node('EqalityExpression_4064', parent=PassUpNode140341914314128)
PassUpNode140341914314000 = Node('ShiftExpression_4000', parent=PassUpNode140341914314064)
PassUpNode140341914313936 = Node('ShiftExpression_3936', parent=PassUpNode140341914314000)
PassUpNode140341914313872 = Node('AdditiveExpression_3872', parent=PassUpNode140341914313936)
PassUpNode140341914313808 = Node('MultiplicativeExpression_3808', parent=PassUpNode140341914313872)
PassUpNode140341914313744 = Node('CastExpression_3744', parent=PassUpNode140341914313808)
PassUpNode140341914313680 = Node('UnaryExpression_3680', parent=PassUpNode140341914313744)
PassUpNode140341914313488 = Node('PostfixExpression_3488', parent=PassUpNode140341914313680)
PrimaryExpression140341914313552 = Node('PrimaryExpression_3552', parent=PassUpNode140341914313488)
Constant140341914313296 = Node('Constant_3296', parent=PrimaryExpression140341914313552)
leaf = Node('5_3296', parent=Constant140341914313296)
PassUpNode140341914342352 = Node('Statement_2352', parent=PassUpNode140341914343440)
PassUpNode140341914343376 = Node('Expression_3376', parent=PassUpNode140341914342352)
AssignmentExpression140341914343312 = Node('AssignmentExpression_3312', parent=PassUpNode140341914343376)
PassUpNode140341914316304 = Node('UnaryExpression_6304', parent=AssignmentExpression140341914343312)
ArrayAccess140341914342160 = Node('ArrayAccess_2160', parent=PassUpNode140341914316304)
PassUpNode140341914342096 = Node('Expression_2096', parent=ArrayAccess140341914342160)
PassUpNode140341914342032 = Node('AssignmentExpression_2032', parent=PassUpNode140341914342096)
PassUpNode140341914341968 = Node('ConditionalExpression_1968', parent=PassUpNode140341914342032)
PassUpNode140341914341904 = Node('LogicalOrExpression_1904', parent=PassUpNode140341914341968)
PassUpNode140341914341840 = Node('LogicalAndExpression_1840', parent=PassUpNode140341914341904)
PassUpNode140341914341776 = Node('InclusiveOrExpression_1776', parent=PassUpNode140341914341840)
PassUpNode140341914341712 = Node('ExclusiveOrExpression_1712', parent=PassUpNode140341914341776)
PassUpNode140341914341648 = Node('AndExpression_1648', parent=PassUpNode140341914341712)
PassUpNode140341914341584 = Node('EqalityExpression_1584', parent=PassUpNode140341914341648)
PassUpNode140341914341520 = Node('ShiftExpression_1520', parent=PassUpNode140341914341584)
PassUpNode140341914341456 = Node('ShiftExpression_1456', parent=PassUpNode140341914341520)
PassUpNode140341914316752 = Node('AdditiveExpression_6752', parent=PassUpNode140341914341456)
PassUpNode140341914316688 = Node('MultiplicativeExpression_6688', parent=PassUpNode140341914316752)
PassUpNode140341914316624 = Node('CastExpression_6624', parent=PassUpNode140341914316688)
PassUpNode140341914316368 = Node('UnaryExpression_6368', parent=PassUpNode140341914316624)
PassUpNode140341914315152 = Node('PostfixExpression_5152', parent=PassUpNode140341914316368)
PrimaryExpression140341914316496 = Node('PrimaryExpression_6496', parent=PassUpNode140341914315152)
Identifier140341914314896 = Node('Identifier_4896', parent=PrimaryExpression140341914316496)
leaf = Node('a_4896', parent=Identifier140341914314896)
leaf = Node("Type=['int'], TokenLocation=(4, 19, 6)", parent=Identifier140341914314896)
ArrayAccess140341914316240 = Node('ArrayAccess_6240', parent=ArrayAccess140341914342160)
PassUpNode140341914316176 = Node('Expression_6176', parent=ArrayAccess140341914316240)
PassUpNode140341914316112 = Node('AssignmentExpression_6112', parent=PassUpNode140341914316176)
PassUpNode140341914316048 = Node('ConditionalExpression_6048', parent=PassUpNode140341914316112)
PassUpNode140341914315984 = Node('LogicalOrExpression_5984', parent=PassUpNode140341914316048)
PassUpNode140341914315920 = Node('LogicalAndExpression_5920', parent=PassUpNode140341914315984)
PassUpNode140341914315856 = Node('InclusiveOrExpression_5856', parent=PassUpNode140341914315920)
PassUpNode140341914315792 = Node('ExclusiveOrExpression_5792', parent=PassUpNode140341914315856)
PassUpNode140341914315728 = Node('AndExpression_5728', parent=PassUpNode140341914315792)
PassUpNode140341914315664 = Node('EqalityExpression_5664', parent=PassUpNode140341914315728)
PassUpNode140341914315600 = Node('ShiftExpression_5600', parent=PassUpNode140341914315664)
PassUpNode140341914315536 = Node('ShiftExpression_5536', parent=PassUpNode140341914315600)
PassUpNode140341914315472 = Node('AdditiveExpression_5472', parent=PassUpNode140341914315536)
PassUpNode140341914315408 = Node('MultiplicativeExpression_5408', parent=PassUpNode140341914315472)
PassUpNode140341914315344 = Node('CastExpression_5344', parent=PassUpNode140341914315408)
PassUpNode140341914315280 = Node('UnaryExpression_5280', parent=PassUpNode140341914315344)
PassUpNode140341914315216 = Node('PostfixExpression_5216', parent=PassUpNode140341914315280)
PrimaryExpression140341914315088 = Node('PrimaryExpression_5088', parent=PassUpNode140341914315216)
Constant140341914315024 = Node('Constant_5024', parent=PrimaryExpression140341914315088)
leaf = Node('9_5024', parent=Constant140341914315024)
PassUpNode140341914314960 = Node('PostfixExpression_4960', parent=ArrayAccess140341914316240)
PrimaryExpression140341914314832 = Node('PrimaryExpression_4832', parent=PassUpNode140341914314960)
Identifier140341914314768 = Node('Identifier_4768', parent=PrimaryExpression140341914314832)
leaf = Node('arr_4768', parent=Identifier140341914314768)
leaf = Node("Array Size=['6', '8'], Subtype='Array', Type=['int'], TokenLocation=(5, 27, 6)", parent=Identifier140341914314768)
leaf = Node('6 8 _6240', parent=ArrayAccess140341914316240)
leaf = Node('9_6240', parent=ArrayAccess140341914316240)
leaf = Node('6 8 _2160', parent=ArrayAccess140341914342160)
leaf = Node('a_2160', parent=ArrayAccess140341914342160)
PassUpNode140341914343248 = Node('AssignmentExpression_3248', parent=AssignmentExpression140341914343312)
PassUpNode140341914343184 = Node('ConditionalExpression_3184', parent=PassUpNode140341914343248)
PassUpNode140341914343120 = Node('LogicalOrExpression_3120', parent=PassUpNode140341914343184)
PassUpNode140341914343056 = Node('LogicalAndExpression_3056', parent=PassUpNode140341914343120)
PassUpNode140341914342992 = Node('InclusiveOrExpression_2992', parent=PassUpNode140341914343056)
PassUpNode140341914342928 = Node('ExclusiveOrExpression_2928', parent=PassUpNode140341914342992)
PassUpNode140341914342864 = Node('AndExpression_2864', parent=PassUpNode140341914342928)
PassUpNode140341914342800 = Node('EqalityExpression_2800', parent=PassUpNode140341914342864)
PassUpNode140341914342736 = Node('ShiftExpression_2736', parent=PassUpNode140341914342800)
PassUpNode140341914342672 = Node('ShiftExpression_2672', parent=PassUpNode140341914342736)
PassUpNode140341914342608 = Node('AdditiveExpression_2608', parent=PassUpNode140341914342672)
PassUpNode140341914342544 = Node('MultiplicativeExpression_2544', parent=PassUpNode140341914342608)
PassUpNode140341914342480 = Node('CastExpression_2480', parent=PassUpNode140341914342544)
PassUpNode140341914342416 = Node('UnaryExpression_2416', parent=PassUpNode140341914342480)
PassUpNode140341914342224 = Node('PostfixExpression_2224', parent=PassUpNode140341914342416)
PrimaryExpression140341914342288 = Node('PrimaryExpression_2288', parent=PassUpNode140341914342224)
Constant140341914316560 = Node('Constant_6560', parent=PrimaryExpression140341914342288)
leaf = Node('100_6560', parent=Constant140341914316560)
PassUpNode140341914343568 = Node('Statement_3568', parent=PassUpNode140341914343632)

for pre, fill, node in RenderTree(PassUpNode140341914343504):
    if "TokenLocation" in node.name: print("%s%s" % (pre, node.name))
    else: print("%s%s" % (pre, node.name[:-5]) )

    
def f(node):
    if node.is_leaf and "TokenLocation" in node.name:
        return 'label="%s"' % (node.name)
    return 'label="%s"' % (node.name[:-5])

DotExporter(PassUpNode140341914343504, nodeattrfunc=f).to_picture("AST.png")
        