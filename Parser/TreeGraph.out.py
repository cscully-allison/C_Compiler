from anytree import Node, RenderTree 
from anytree.exporter import DotExporter
PassUpNode139664160228496 = Node('TranslationUnit_8496')
PassUpNode139664160099152 = Node('ExternalDeclaration_9152', parent=PassUpNode139664160228496)
FunctionDefintion139664160099536 = Node('FunctionDefintion_9536', parent=PassUpNode139664160099152)
DeclarationSpecifiers139664160098704 = Node('DeclarationSpecifiers_8704', parent=FunctionDefintion139664160099536)
leaf = Node('int_8704', parent=DeclarationSpecifiers139664160098704)
PassUpNode139664160098896 = Node('Declarator_8896', parent=FunctionDefintion139664160099536)
PassUpNode139664160099472 = Node('DirectDeclarator_9472', parent=PassUpNode139664160098896)
PassUpNode139664160098832 = Node('DirectDeclarator_8832', parent=PassUpNode139664160099472)
Identifier139664160098768 = Node('Identifier_8768', parent=PassUpNode139664160098832)
leaf = Node('main_8768', parent=Identifier139664160098768)
leaf = Node("TokenLocation=(5, 21, 5)", parent=Identifier139664160098768)
PassUpNode139664160099408 = Node('ParameterTypeList_9408', parent=PassUpNode139664160099472)
PassUpNode139664160099344 = Node('ParameterList_9344', parent=PassUpNode139664160099408)
PassUpNode139664160099280 = Node('ParameterDeclaration_9280', parent=PassUpNode139664160099344)
DeclarationSpecifiers139664160099024 = Node('DeclarationSpecifiers_9024', parent=PassUpNode139664160099280)
leaf = Node('int_9024', parent=DeclarationSpecifiers139664160099024)
PassUpNode139664160099216 = Node('Declarator_9216', parent=PassUpNode139664160099280)
PassUpNode139664160099088 = Node('DirectDeclarator_9088', parent=PassUpNode139664160099216)
Identifier139664160098960 = Node('Identifier_8960', parent=PassUpNode139664160099088)
leaf = Node('g_8960', parent=Identifier139664160098960)
leaf = Node("TokenLocation=(5, 30, 14)", parent=Identifier139664160098960)
CompoundStatement139664160189648 = Node('CompoundStatement_9648', parent=FunctionDefintion139664160099536)
DeclList139664160142800 = Node('DeclList_2800', parent=CompoundStatement139664160189648)
DeclList139664160100112 = Node('DeclList_0112', parent=DeclList139664160142800)
Declaration139664160099792 = Node('Declaration_9792', parent=DeclList139664160100112)
DeclarationSpecifiers139664160099664 = Node('DeclarationSpecifiers_9664', parent=Declaration139664160099792)
leaf = Node('char_9664', parent=DeclarationSpecifiers139664160099664)
InitDeclList139664160100240 = Node('InitDeclList_0240', parent=Declaration139664160099792)
InitDeclList139664160099920 = Node('InitDeclList_9920', parent=InitDeclList139664160100240)
PassUpNode139664160099856 = Node('Declarator_9856', parent=InitDeclList139664160099920)
PassUpNode139664160099728 = Node('DirectDeclarator_9728', parent=PassUpNode139664160099856)
Identifier139664160099600 = Node('Identifier_9600', parent=PassUpNode139664160099728)
leaf = Node('a_9600', parent=Identifier139664160099600)
leaf = Node("Type='char', TokenLocation=(6, 43, 10)", parent=Identifier139664160099600)
PassUpNode139664160100176 = Node('Declarator_0176', parent=InitDeclList139664160100240)
PassUpNode139664160100048 = Node('DirectDeclarator_0048', parent=PassUpNode139664160100176)
Identifier139664160099984 = Node('Identifier_9984', parent=PassUpNode139664160100048)
leaf = Node('d_9984', parent=Identifier139664160099984)
leaf = Node("Type='char', TokenLocation=(6, 46, 13)", parent=Identifier139664160099984)
Declaration139664160142864 = Node('Declaration_2864', parent=DeclList139664160142800)
DeclarationSpecifiers139664160100304 = Node('DeclarationSpecifiers_0304', parent=Declaration139664160142864)
leaf = Node('int_0304', parent=DeclarationSpecifiers139664160100304)
InitDeclList139664160141712 = Node('InitDeclList_1712', parent=Declaration139664160142864)
PassUpNode139664160141520 = Node('Declarator_1520', parent=InitDeclList139664160141712)
PassUpNode139664160142736 = Node('DirectDeclarator_2736', parent=PassUpNode139664160141520)
PassUpNode139664160141392 = Node('DirectDeclarator_1392', parent=PassUpNode139664160142736)
Identifier139664160141456 = Node('Identifier_1456', parent=PassUpNode139664160141392)
leaf = Node('arr_1456', parent=Identifier139664160141456)
leaf = Node("Type='int', TokenLocation=(7, 57, 9)", parent=Identifier139664160141456)
PassUpNode139664160142672 = Node('ConstantExpression_2672', parent=PassUpNode139664160142736)
PassUpNode139664160142608 = Node('ConditionalExpression_2608', parent=PassUpNode139664160142672)
PassUpNode139664160142544 = Node('LogicalOrExpression_2544', parent=PassUpNode139664160142608)
PassUpNode139664160142480 = Node('LogicalAndExpression_2480', parent=PassUpNode139664160142544)
PassUpNode139664160142416 = Node('InclusiveOrExpression_2416', parent=PassUpNode139664160142480)
PassUpNode139664160142352 = Node('ExclusiveOrExpression_2352', parent=PassUpNode139664160142416)
PassUpNode139664160142288 = Node('AndExpression_2288', parent=PassUpNode139664160142352)
PassUpNode139664160142224 = Node('EqalityExpression_2224', parent=PassUpNode139664160142288)
PassUpNode139664160142160 = Node('ShiftExpression_2160', parent=PassUpNode139664160142224)
PassUpNode139664160142096 = Node('ShiftExpression_2096', parent=PassUpNode139664160142160)
PassUpNode139664160142032 = Node('AdditiveExpression_2032', parent=PassUpNode139664160142096)
PassUpNode139664160141968 = Node('MultiplicativeExpression_1968', parent=PassUpNode139664160142032)
PassUpNode139664160141904 = Node('CastExpression_1904', parent=PassUpNode139664160141968)
PassUpNode139664160141840 = Node('UnaryExpression_1840', parent=PassUpNode139664160141904)
PassUpNode139664160141776 = Node('PostfixExpression_1776', parent=PassUpNode139664160141840)
PrimaryExpression139664160141648 = Node('PrimaryExpression_1648', parent=PassUpNode139664160141776)
Constant139664160141584 = Node('Constant_1584', parent=PrimaryExpression139664160141648)
leaf = Node('10_1584', parent=Constant139664160141584)
PassUpNode139664160186448 = Node('StatementList_6448', parent=CompoundStatement139664160189648)
PassUpNode139664160143056 = Node('StatementList_3056', parent=PassUpNode139664160186448)
PassUpNode139664160142992 = Node('Statement_2992', parent=PassUpNode139664160143056)
SelectionStatement139664160189200 = Node('SelectionStatement_9200', parent=PassUpNode139664160142992)
PassUpNode139664160144784 = Node('Expression_4784', parent=SelectionStatement139664160189200)
PassUpNode139664160144720 = Node('AssignmentExpression_4720', parent=PassUpNode139664160144784)
PassUpNode139664160144656 = Node('ConditionalExpression_4656', parent=PassUpNode139664160144720)
PassUpNode139664160144592 = Node('LogicalOrExpression_4592', parent=PassUpNode139664160144656)
PassUpNode139664160144528 = Node('LogicalAndExpression_4528', parent=PassUpNode139664160144592)
PassUpNode139664160144464 = Node('InclusiveOrExpression_4464', parent=PassUpNode139664160144528)
PassUpNode139664160144400 = Node('ExclusiveOrExpression_4400', parent=PassUpNode139664160144464)
PassUpNode139664160144336 = Node('AndExpression_4336', parent=PassUpNode139664160144400)
PassUpNode139664160143184 = Node('EqalityExpression_3184', parent=PassUpNode139664160144336)
BinOp139664160144272 = Node('BinOp_4272', parent=PassUpNode139664160143184)
PassUpNode139664160143632 = Node('ShiftExpression_3632', parent=BinOp139664160144272)
PassUpNode139664160143568 = Node('ShiftExpression_3568', parent=PassUpNode139664160143632)
PassUpNode139664160143504 = Node('AdditiveExpression_3504', parent=PassUpNode139664160143568)
PassUpNode139664160143440 = Node('MultiplicativeExpression_3440', parent=PassUpNode139664160143504)
PassUpNode139664160143376 = Node('CastExpression_3376', parent=PassUpNode139664160143440)
PassUpNode139664160143312 = Node('UnaryExpression_3312', parent=PassUpNode139664160143376)
PassUpNode139664160143248 = Node('PostfixExpression_3248', parent=PassUpNode139664160143312)
PrimaryExpression139664160143120 = Node('PrimaryExpression_3120', parent=PassUpNode139664160143248)
Identifier139664160142928 = Node('Identifier_2928', parent=PrimaryExpression139664160143120)
leaf = Node('a_2928', parent=Identifier139664160142928)
leaf = Node("Type='char', TokenLocation=(6, 43, 10)", parent=Identifier139664160142928)
leaf = Node('<_4272', parent=BinOp139664160144272)
PassUpNode139664160144208 = Node('ShiftExpression_4208', parent=BinOp139664160144272)
PassUpNode139664160144144 = Node('AdditiveExpression_4144', parent=PassUpNode139664160144208)
PassUpNode139664160144080 = Node('MultiplicativeExpression_4080', parent=PassUpNode139664160144144)
PassUpNode139664160144016 = Node('CastExpression_4016', parent=PassUpNode139664160144080)
PassUpNode139664160143952 = Node('UnaryExpression_3952', parent=PassUpNode139664160144016)
PassUpNode139664160143888 = Node('PostfixExpression_3888', parent=PassUpNode139664160143952)
PrimaryExpression139664160143760 = Node('PrimaryExpression_3760', parent=PassUpNode139664160143888)
Identifier139664160143696 = Node('Identifier_3696', parent=PrimaryExpression139664160143760)
leaf = Node('d_3696', parent=Identifier139664160143696)
leaf = Node("Type='char', TokenLocation=(6, 46, 13)", parent=Identifier139664160143696)
PassUpNode139664160144912 = Node('Statement_4912', parent=SelectionStatement139664160189200)
CompoundStatement139664160144848 = Node('CompoundStatement_4848', parent=PassUpNode139664160144912)
DeclList139664160145168 = Node('DeclList_5168', parent=CompoundStatement139664160144848)
Declaration139664160145360 = Node('Declaration_5360', parent=DeclList139664160145168)
DeclarationSpecifiers139664160145040 = Node('DeclarationSpecifiers_5040', parent=Declaration139664160145360)
leaf = Node('int_5040', parent=DeclarationSpecifiers139664160145040)
InitDeclList139664160145296 = Node('InitDeclList_5296', parent=Declaration139664160145360)
PassUpNode139664160145232 = Node('Declarator_5232', parent=InitDeclList139664160145296)
PassUpNode139664160145104 = Node('DirectDeclarator_5104', parent=PassUpNode139664160145232)
Identifier139664160144976 = Node('Identifier_4976', parent=PassUpNode139664160145104)
leaf = Node('a4_4976', parent=Identifier139664160144976)
leaf = Node("Type='int', TokenLocation=(10, 92, 11)", parent=Identifier139664160144976)
PassUpNode139664160186576 = Node('Statement_6576', parent=SelectionStatement139664160189200)
CompoundStatement139664160186512 = Node('CompoundStatement_6512', parent=PassUpNode139664160186576)
DeclList139664160186832 = Node('DeclList_6832', parent=CompoundStatement139664160186512)
Declaration139664160187024 = Node('Declaration_7024', parent=DeclList139664160186832)
DeclarationSpecifiers139664160186704 = Node('DeclarationSpecifiers_6704', parent=Declaration139664160187024)
leaf = Node('int_6704', parent=DeclarationSpecifiers139664160186704)
InitDeclList139664160186960 = Node('InitDeclList_6960', parent=Declaration139664160187024)
PassUpNode139664160186896 = Node('Declarator_6896', parent=InitDeclList139664160186960)
PassUpNode139664160186768 = Node('DirectDeclarator_6768', parent=PassUpNode139664160186896)
Identifier139664160186640 = Node('Identifier_6640', parent=PassUpNode139664160186768)
leaf = Node('b6_6640', parent=Identifier139664160186640)
leaf = Node("Type='int', TokenLocation=(14, 121, 11)", parent=Identifier139664160186640)
PassUpNode139664160189072 = Node('StatementList_9072', parent=CompoundStatement139664160186512)
PassUpNode139664160187984 = Node('Statement_7984', parent=PassUpNode139664160189072)
PassUpNode139664160189008 = Node('Expression_9008', parent=PassUpNode139664160187984)
AssignmentExpression139664160188944 = Node('AssignmentExpression_8944', parent=PassUpNode139664160189008)
PassUpNode139664160187344 = Node('UnaryExpression_7344', parent=AssignmentExpression139664160188944)
PassUpNode139664160187280 = Node('PostfixExpression_7280', parent=PassUpNode139664160187344)
PrimaryExpression139664160187152 = Node('PrimaryExpression_7152', parent=PassUpNode139664160187280)
Identifier139664160187088 = Node('Identifier_7088', parent=PrimaryExpression139664160187152)
leaf = Node('b6_7088', parent=Identifier139664160187088)
leaf = Node("Type='int', TokenLocation=(14, 121, 11)", parent=Identifier139664160187088)
PassUpNode139664160188880 = Node('AssignmentExpression_8880', parent=AssignmentExpression139664160188944)
PassUpNode139664160188816 = Node('ConditionalExpression_8816', parent=PassUpNode139664160188880)
PassUpNode139664160188752 = Node('LogicalOrExpression_8752', parent=PassUpNode139664160188816)
PassUpNode139664160188688 = Node('LogicalAndExpression_8688', parent=PassUpNode139664160188752)
PassUpNode139664160188624 = Node('InclusiveOrExpression_8624', parent=PassUpNode139664160188688)
PassUpNode139664160188560 = Node('ExclusiveOrExpression_8560', parent=PassUpNode139664160188624)
PassUpNode139664160188496 = Node('AndExpression_8496', parent=PassUpNode139664160188560)
PassUpNode139664160188432 = Node('EqalityExpression_8432', parent=PassUpNode139664160188496)
PassUpNode139664160188368 = Node('ShiftExpression_8368', parent=PassUpNode139664160188432)
PassUpNode139664160187536 = Node('ShiftExpression_7536', parent=PassUpNode139664160188368)
BinOp139664160188304 = Node('BinOp_8304', parent=PassUpNode139664160187536)
PassUpNode139664160187792 = Node('AdditiveExpression_7792', parent=BinOp139664160188304)
PassUpNode139664160187728 = Node('MultiplicativeExpression_7728', parent=PassUpNode139664160187792)
PassUpNode139664160187664 = Node('CastExpression_7664', parent=PassUpNode139664160187728)
PassUpNode139664160187600 = Node('UnaryExpression_7600', parent=PassUpNode139664160187664)
PassUpNode139664160187408 = Node('PostfixExpression_7408', parent=PassUpNode139664160187600)
PrimaryExpression139664160187472 = Node('PrimaryExpression_7472', parent=PassUpNode139664160187408)
Constant139664160187216 = Node('Constant_7216', parent=PrimaryExpression139664160187472)
leaf = Node('4_7216', parent=Constant139664160187216)
leaf = Node('+_8304', parent=BinOp139664160188304)
PassUpNode139664160188240 = Node('MultiplicativeExpression_8240', parent=BinOp139664160188304)
PassUpNode139664160188176 = Node('CastExpression_8176', parent=PassUpNode139664160188240)
PassUpNode139664160188112 = Node('UnaryExpression_8112', parent=PassUpNode139664160188176)
PassUpNode139664160188048 = Node('PostfixExpression_8048', parent=PassUpNode139664160188112)
PrimaryExpression139664160187920 = Node('PrimaryExpression_7920', parent=PassUpNode139664160188048)
Constant139664160187856 = Node('Constant_7856', parent=PrimaryExpression139664160187920)
leaf = Node('2_7856', parent=Constant139664160187856)
PassUpNode139664160189264 = Node('Statement_9264', parent=PassUpNode139664160186448)
IterationStatement139664160228432 = Node('IterationStatement_8432', parent=PassUpNode139664160189264)
PassUpNode139664160227600 = Node('Expression_7600', parent=IterationStatement139664160228432)
AssignmentExpression139664160227536 = Node('AssignmentExpression_7536', parent=PassUpNode139664160227600)
PassUpNode139664160189456 = Node('UnaryExpression_9456', parent=AssignmentExpression139664160227536)
PassUpNode139664160189392 = Node('PostfixExpression_9392', parent=PassUpNode139664160189456)
PrimaryExpression139664160189136 = Node('PrimaryExpression_9136', parent=PassUpNode139664160189392)
Identifier139664160143824 = Node('Identifier_3824', parent=PrimaryExpression139664160189136)
leaf = Node('a_3824', parent=Identifier139664160143824)
leaf = Node("Type='char', TokenLocation=(6, 43, 10)", parent=Identifier139664160143824)
PassUpNode139664160227472 = Node('AssignmentExpression_7472', parent=AssignmentExpression139664160227536)
PassUpNode139664160227408 = Node('ConditionalExpression_7408', parent=PassUpNode139664160227472)
PassUpNode139664160190416 = Node('LogicalOrExpression_0416', parent=PassUpNode139664160227408)
PassUpNode139664160190352 = Node('LogicalAndExpression_0352', parent=PassUpNode139664160190416)
PassUpNode139664160190288 = Node('InclusiveOrExpression_0288', parent=PassUpNode139664160190352)
PassUpNode139664160190224 = Node('ExclusiveOrExpression_0224', parent=PassUpNode139664160190288)
PassUpNode139664160190160 = Node('AndExpression_0160', parent=PassUpNode139664160190224)
PassUpNode139664160190096 = Node('EqalityExpression_0096', parent=PassUpNode139664160190160)
PassUpNode139664160190032 = Node('ShiftExpression_0032', parent=PassUpNode139664160190096)
PassUpNode139664160189968 = Node('ShiftExpression_9968', parent=PassUpNode139664160190032)
PassUpNode139664160189904 = Node('AdditiveExpression_9904', parent=PassUpNode139664160189968)
PassUpNode139664160189840 = Node('MultiplicativeExpression_9840', parent=PassUpNode139664160189904)
PassUpNode139664160189776 = Node('CastExpression_9776', parent=PassUpNode139664160189840)
PassUpNode139664160189712 = Node('UnaryExpression_9712', parent=PassUpNode139664160189776)
PassUpNode139664160189520 = Node('PostfixExpression_9520', parent=PassUpNode139664160189712)
PrimaryExpression139664160189584 = Node('PrimaryExpression_9584', parent=PassUpNode139664160189520)
Constant139664160189328 = Node('Constant_9328', parent=PrimaryExpression139664160189584)
leaf = Node('4_9328', parent=Constant139664160189328)
PassUpNode139664160227920 = Node('Statement_7920', parent=IterationStatement139664160228432)
CompoundStatement139664160227664 = Node('CompoundStatement_7664', parent=PassUpNode139664160227920)
DeclList139664160228112 = Node('DeclList_8112', parent=CompoundStatement139664160227664)
Declaration139664160228304 = Node('Declaration_8304', parent=DeclList139664160228112)
DeclarationSpecifiers139664160227984 = Node('DeclarationSpecifiers_7984', parent=Declaration139664160228304)
leaf = Node('int_7984', parent=DeclarationSpecifiers139664160227984)
InitDeclList139664160228240 = Node('InitDeclList_8240', parent=Declaration139664160228304)
PassUpNode139664160228176 = Node('Declarator_8176', parent=InitDeclList139664160228240)
PassUpNode139664160228048 = Node('DirectDeclarator_8048', parent=PassUpNode139664160228176)
Identifier139664160227856 = Node('Identifier_7856', parent=PassUpNode139664160228048)
leaf = Node('q_7856', parent=Identifier139664160227856)
leaf = Node("Type='int', TokenLocation=(21, 187, 11)", parent=Identifier139664160227856)

for pre, fill, node in RenderTree(PassUpNode139664160228496):
    if "TokenLocation" in node.name: print("%s%s" % (pre, node.name))
    else: print("%s%s" % (pre, node.name[:-5]) )

    
def f(node):
    if node.is_leaf and "TokenLocation" in node.name:
        return 'label="%s"' % (node.name)
    return 'label="%s"' % (node.name[:-5])

DotExporter(PassUpNode139664160228496, nodeattrfunc=f).to_picture("AST.png")
        