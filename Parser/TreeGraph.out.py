from anytree import Node, RenderTree 
from anytree.exporter import DotExporter
PassUpNode140548244325840 = Node('TranslationUnit_5840')
PassUpNode140548244325904 = Node('ExternalDeclaration_5904', parent=PassUpNode140548244325840)
FunctionDefintion140548244232592 = Node('FunctionDefintion_2592', parent=PassUpNode140548244325904)
DeclarationSpecifiers140548247754192 = Node('DeclarationSpecifiers_4192', parent=FunctionDefintion140548244232592)
leaf = Node('int_4192', parent=DeclarationSpecifiers140548247754192)
PassUpNode140548247842192 = Node('Declarator_2192', parent=FunctionDefintion140548244232592)
PassUpNode140548244232400 = Node('DirectDeclarator_2400', parent=PassUpNode140548247842192)
PassUpNode140548247838992 = Node('DirectDeclarator_8992', parent=PassUpNode140548244232400)
Identifier140548247754128 = Node('Identifier_4128', parent=PassUpNode140548247838992)
leaf = Node('main_4128', parent=Identifier140548247754128)
leaf = Node("TokenLocation=(1, 4, 5)", parent=Identifier140548247754128)
CompoundStatement140548244232464 = Node('CompoundStatement_2464', parent=FunctionDefintion140548244232592)
DeclList140548244285008 = Node('DeclList_5008', parent=CompoundStatement140548244232464)
DeclList140548244284432 = Node('DeclList_4432', parent=DeclList140548244285008)
Declaration140548244284496 = Node('Declaration_4496', parent=DeclList140548244284432)
DeclarationSpecifiers140548244232656 = Node('DeclarationSpecifiers_2656', parent=Declaration140548244284496)
leaf = Node('int_2656', parent=DeclarationSpecifiers140548244232656)
InitDeclList140548244283472 = Node('InitDeclList_3472', parent=Declaration140548244284496)
PassUpNode140548244234064 = Node('Declarator_4064', parent=InitDeclList140548244283472)
ArrayDeclaration140548244284368 = Node('ArrayDeclaration_4368', parent=PassUpNode140548244234064)
ArrayDeclaration140548244234000 = Node('ArrayDeclaration_4000', parent=ArrayDeclaration140548244284368)
PassUpNode140548244232720 = Node('DirectDeclarator_2720', parent=ArrayDeclaration140548244234000)
Identifier140548244232528 = Node('Identifier_2528', parent=PassUpNode140548244232720)
leaf = Node('arr_2528', parent=Identifier140548244232528)
leaf = Node("Array Size=['2', '3'], Subtype='Array', Type=['int'], TokenLocation=(3, 18, 6)", parent=Identifier140548244232528)
PassUpNode140548244233936 = Node('ConstantExpression_3936', parent=ArrayDeclaration140548244234000)
PassUpNode140548244233872 = Node('ConditionalExpression_3872', parent=PassUpNode140548244233936)
PassUpNode140548244233808 = Node('LogicalOrExpression_3808', parent=PassUpNode140548244233872)
PassUpNode140548244233744 = Node('LogicalAndExpression_3744', parent=PassUpNode140548244233808)
PassUpNode140548244233680 = Node('InclusiveOrExpression_3680', parent=PassUpNode140548244233744)
PassUpNode140548244233616 = Node('ExclusiveOrExpression_3616', parent=PassUpNode140548244233680)
PassUpNode140548244233552 = Node('AndExpression_3552', parent=PassUpNode140548244233616)
PassUpNode140548244233488 = Node('EqalityExpression_3488', parent=PassUpNode140548244233552)
PassUpNode140548244233424 = Node('ShiftExpression_3424', parent=PassUpNode140548244233488)
PassUpNode140548244233360 = Node('ShiftExpression_3360', parent=PassUpNode140548244233424)
PassUpNode140548244233296 = Node('AdditiveExpression_3296', parent=PassUpNode140548244233360)
PassUpNode140548244233232 = Node('MultiplicativeExpression_3232', parent=PassUpNode140548244233296)
PassUpNode140548244233168 = Node('CastExpression_3168', parent=PassUpNode140548244233232)
PassUpNode140548244233104 = Node('UnaryExpression_3104', parent=PassUpNode140548244233168)
PassUpNode140548244233040 = Node('PostfixExpression_3040', parent=PassUpNode140548244233104)
PrimaryExpression140548244232912 = Node('PrimaryExpression_2912', parent=PassUpNode140548244233040)
Constant140548244232848 = Node('Constant_2848', parent=PrimaryExpression140548244232912)
leaf = Node('2_2848', parent=Constant140548244232848)
PassUpNode140548244284304 = Node('ConstantExpression_4304', parent=ArrayDeclaration140548244284368)
PassUpNode140548244284240 = Node('ConditionalExpression_4240', parent=PassUpNode140548244284304)
PassUpNode140548244284176 = Node('LogicalOrExpression_4176', parent=PassUpNode140548244284240)
PassUpNode140548244284112 = Node('LogicalAndExpression_4112', parent=PassUpNode140548244284176)
PassUpNode140548244284048 = Node('InclusiveOrExpression_4048', parent=PassUpNode140548244284112)
PassUpNode140548244283984 = Node('ExclusiveOrExpression_3984', parent=PassUpNode140548244284048)
PassUpNode140548244283920 = Node('AndExpression_3920', parent=PassUpNode140548244283984)
PassUpNode140548244283856 = Node('EqalityExpression_3856', parent=PassUpNode140548244283920)
PassUpNode140548244283792 = Node('ShiftExpression_3792', parent=PassUpNode140548244283856)
PassUpNode140548244283728 = Node('ShiftExpression_3728', parent=PassUpNode140548244283792)
PassUpNode140548244283664 = Node('AdditiveExpression_3664', parent=PassUpNode140548244283728)
PassUpNode140548244283600 = Node('MultiplicativeExpression_3600', parent=PassUpNode140548244283664)
PassUpNode140548244283536 = Node('CastExpression_3536', parent=PassUpNode140548244283600)
PassUpNode140548244234128 = Node('UnaryExpression_4128', parent=PassUpNode140548244283536)
PassUpNode140548244232976 = Node('PostfixExpression_2976', parent=PassUpNode140548244234128)
PrimaryExpression140548244234192 = Node('PrimaryExpression_4192', parent=PassUpNode140548244232976)
Constant140548244232784 = Node('Constant_2784', parent=PrimaryExpression140548244234192)
leaf = Node('3_2784', parent=Constant140548244232784)
Declaration140548244284688 = Node('Declaration_4688', parent=DeclList140548244285008)
DeclarationSpecifiers140548244284624 = Node('DeclarationSpecifiers_4624', parent=Declaration140548244284688)
leaf = Node('int_4624', parent=DeclarationSpecifiers140548244284624)
InitDeclList140548244284816 = Node('InitDeclList_4816', parent=Declaration140548244284688)
PassUpNode140548244325776 = Node('StatementList_5776', parent=CompoundStatement140548244232464)
PassUpNode140548244324688 = Node('Statement_4688', parent=PassUpNode140548244325776)
PassUpNode140548244325712 = Node('Expression_5712', parent=PassUpNode140548244324688)
AssignmentExpression140548244325648 = Node('AssignmentExpression_5648', parent=PassUpNode140548244325712)
PassUpNode140548244286352 = Node('UnaryExpression_6352', parent=AssignmentExpression140548244325648)
ArrayAccess140548244324496 = Node('ArrayAccess_4496', parent=PassUpNode140548244286352)
PassUpNode140548244324432 = Node('Expression_4432', parent=ArrayAccess140548244324496)
PassUpNode140548244287440 = Node('AssignmentExpression_7440', parent=PassUpNode140548244324432)
PassUpNode140548244287376 = Node('ConditionalExpression_7376', parent=PassUpNode140548244287440)
PassUpNode140548244287312 = Node('LogicalOrExpression_7312', parent=PassUpNode140548244287376)
PassUpNode140548244287248 = Node('LogicalAndExpression_7248', parent=PassUpNode140548244287312)
PassUpNode140548244287184 = Node('InclusiveOrExpression_7184', parent=PassUpNode140548244287248)
PassUpNode140548244287120 = Node('ExclusiveOrExpression_7120', parent=PassUpNode140548244287184)
PassUpNode140548244287056 = Node('AndExpression_7056', parent=PassUpNode140548244287120)
PassUpNode140548244286992 = Node('EqalityExpression_6992', parent=PassUpNode140548244287056)
PassUpNode140548244286928 = Node('ShiftExpression_6928', parent=PassUpNode140548244286992)
PassUpNode140548244286864 = Node('ShiftExpression_6864', parent=PassUpNode140548244286928)
PassUpNode140548244286800 = Node('AdditiveExpression_6800', parent=PassUpNode140548244286864)
PassUpNode140548244286736 = Node('MultiplicativeExpression_6736', parent=PassUpNode140548244286800)
PassUpNode140548244286672 = Node('CastExpression_6672', parent=PassUpNode140548244286736)
PassUpNode140548244286416 = Node('UnaryExpression_6416', parent=PassUpNode140548244286672)
PassUpNode140548244285776 = Node('PostfixExpression_5776', parent=PassUpNode140548244286416)
PrimaryExpression140548244286544 = Node('PrimaryExpression_6544', parent=PassUpNode140548244285776)
Constant140548244284880 = Node('Constant_4880', parent=PrimaryExpression140548244286544)
leaf = Node('1_4880', parent=Constant140548244284880)
ArrayAccess140548244286288 = Node('ArrayAccess_6288', parent=ArrayAccess140548244324496)
PassUpNode140548244286224 = Node('Expression_6224', parent=ArrayAccess140548244286288)
PassUpNode140548244286160 = Node('AssignmentExpression_6160', parent=PassUpNode140548244286224)
PassUpNode140548244286096 = Node('ConditionalExpression_6096', parent=PassUpNode140548244286160)
PassUpNode140548244286032 = Node('LogicalOrExpression_6032', parent=PassUpNode140548244286096)
PassUpNode140548244284944 = Node('LogicalAndExpression_4944', parent=PassUpNode140548244286032)
PassUpNode140548244285072 = Node('InclusiveOrExpression_5072', parent=PassUpNode140548244284944)
PassUpNode140548244285136 = Node('ExclusiveOrExpression_5136', parent=PassUpNode140548244285072)
PassUpNode140548244285200 = Node('AndExpression_5200', parent=PassUpNode140548244285136)
PassUpNode140548244285264 = Node('EqalityExpression_5264', parent=PassUpNode140548244285200)
PassUpNode140548244285328 = Node('ShiftExpression_5328', parent=PassUpNode140548244285264)
PassUpNode140548244285392 = Node('ShiftExpression_5392', parent=PassUpNode140548244285328)
PassUpNode140548244285456 = Node('AdditiveExpression_5456', parent=PassUpNode140548244285392)
PassUpNode140548244285520 = Node('MultiplicativeExpression_5520', parent=PassUpNode140548244285456)
PassUpNode140548244285584 = Node('CastExpression_5584', parent=PassUpNode140548244285520)
PassUpNode140548244285648 = Node('UnaryExpression_5648', parent=PassUpNode140548244285584)
PassUpNode140548244285712 = Node('PostfixExpression_5712', parent=PassUpNode140548244285648)
PrimaryExpression140548244285840 = Node('PrimaryExpression_5840', parent=PassUpNode140548244285712)
Constant140548244285904 = Node('Constant_5904', parent=PrimaryExpression140548244285840)
leaf = Node('1_5904', parent=Constant140548244285904)
PassUpNode140548244285968 = Node('PostfixExpression_5968', parent=ArrayAccess140548244286288)
PrimaryExpression140548244284752 = Node('PrimaryExpression_4752', parent=PassUpNode140548244285968)
Identifier140548244284560 = Node('Identifier_4560', parent=PrimaryExpression140548244284752)
leaf = Node('arr_4560', parent=Identifier140548244284560)
leaf = Node("Array Size=['2', '3'], Subtype='Array', Type=['int'], TokenLocation=(3, 18, 6)", parent=Identifier140548244284560)
leaf = Node('2 3 _6288', parent=ArrayAccess140548244286288)
leaf = Node('1_6288', parent=ArrayAccess140548244286288)
leaf = Node('2 3 _4496', parent=ArrayAccess140548244324496)
leaf = Node('1_4496', parent=ArrayAccess140548244324496)
PassUpNode140548244325584 = Node('AssignmentExpression_5584', parent=AssignmentExpression140548244325648)
PassUpNode140548244325520 = Node('ConditionalExpression_5520', parent=PassUpNode140548244325584)
PassUpNode140548244325456 = Node('LogicalOrExpression_5456', parent=PassUpNode140548244325520)
PassUpNode140548244325392 = Node('LogicalAndExpression_5392', parent=PassUpNode140548244325456)
PassUpNode140548244325328 = Node('InclusiveOrExpression_5328', parent=PassUpNode140548244325392)
PassUpNode140548244325264 = Node('ExclusiveOrExpression_5264', parent=PassUpNode140548244325328)
PassUpNode140548244325200 = Node('AndExpression_5200', parent=PassUpNode140548244325264)
PassUpNode140548244325136 = Node('EqalityExpression_5136', parent=PassUpNode140548244325200)
PassUpNode140548244325072 = Node('ShiftExpression_5072', parent=PassUpNode140548244325136)
PassUpNode140548244325008 = Node('ShiftExpression_5008', parent=PassUpNode140548244325072)
PassUpNode140548244324944 = Node('AdditiveExpression_4944', parent=PassUpNode140548244325008)
PassUpNode140548244324880 = Node('MultiplicativeExpression_4880', parent=PassUpNode140548244324944)
PassUpNode140548244324816 = Node('CastExpression_4816', parent=PassUpNode140548244324880)
PassUpNode140548244324752 = Node('UnaryExpression_4752', parent=PassUpNode140548244324816)
PassUpNode140548244324560 = Node('PostfixExpression_4560', parent=PassUpNode140548244324752)
PrimaryExpression140548244324624 = Node('PrimaryExpression_4624', parent=PassUpNode140548244324560)
Constant140548244286608 = Node('Constant_6608', parent=PrimaryExpression140548244324624)
leaf = Node('3_6608', parent=Constant140548244286608)

for pre, fill, node in RenderTree(PassUpNode140548244325840):
    if "TokenLocation" in node.name: print("%s%s" % (pre, node.name))
    else: print("%s%s" % (pre, node.name[:-5]) )

    
def f(node):
    if node.is_leaf and "TokenLocation" in node.name:
        return 'label="%s"' % (node.name)
    return 'label="%s"' % (node.name[:-5])

DotExporter(PassUpNode140548244325840, nodeattrfunc=f).to_picture("AST.png")
        