from anytree import Node, RenderTree 
from anytree.exporter import DotExporter
PassUpNode139984305240272 = Node('TranslationUnit_0272')
PassUpNode139984305240336 = Node('ExternalDeclaration_0336', parent=PassUpNode139984305240272)
FunctionDefintion139984305079824 = Node('FunctionDefintion_9824', parent=PassUpNode139984305240336)
DeclarationSpecifiers139984305078992 = Node('DeclarationSpecifiers_8992', parent=FunctionDefintion139984305079824)
leaf = Node('int_8992', parent=DeclarationSpecifiers139984305078992)
PassUpNode139984305079184 = Node('Declarator_9184', parent=FunctionDefintion139984305079824)
PassUpNode139984305079760 = Node('DirectDeclarator_9760', parent=PassUpNode139984305079184)
PassUpNode139984305079120 = Node('DirectDeclarator_9120', parent=PassUpNode139984305079760)
Identifier139984305079056 = Node('Identifier_9056', parent=PassUpNode139984305079120)
leaf = Node('main_9056', parent=Identifier139984305079056)
leaf = Node("TokenLocation=(5, 21, 5)", parent=Identifier139984305079056)
PassUpNode139984305079696 = Node('ParameterTypeList_9696', parent=PassUpNode139984305079760)
PassUpNode139984305079632 = Node('ParameterList_9632', parent=PassUpNode139984305079696)
PassUpNode139984305079568 = Node('ParameterDeclaration_9568', parent=PassUpNode139984305079632)
DeclarationSpecifiers139984305079312 = Node('DeclarationSpecifiers_9312', parent=PassUpNode139984305079568)
leaf = Node('int_9312', parent=DeclarationSpecifiers139984305079312)
PassUpNode139984305079504 = Node('Declarator_9504', parent=PassUpNode139984305079568)
PassUpNode139984305079376 = Node('DirectDeclarator_9376', parent=PassUpNode139984305079504)
Identifier139984305079248 = Node('Identifier_9248', parent=PassUpNode139984305079376)
leaf = Node('g_9248', parent=Identifier139984305079248)
leaf = Node("TokenLocation=(5, 30, 14)", parent=Identifier139984305079248)
CompoundStatement139984305079440 = Node('CompoundStatement_9440', parent=FunctionDefintion139984305079824)
DeclList139984305082064 = Node('DeclList_2064', parent=CompoundStatement139984305079440)
DeclList139984305080400 = Node('DeclList_0400', parent=DeclList139984305082064)
Declaration139984305080080 = Node('Declaration_0080', parent=DeclList139984305080400)
DeclarationSpecifiers139984305079952 = Node('DeclarationSpecifiers_9952', parent=Declaration139984305080080)
leaf = Node('char_9952', parent=DeclarationSpecifiers139984305079952)
InitDeclList139984305080528 = Node('InitDeclList_0528', parent=Declaration139984305080080)
InitDeclList139984305080208 = Node('InitDeclList_0208', parent=InitDeclList139984305080528)
PassUpNode139984305080144 = Node('Declarator_0144', parent=InitDeclList139984305080208)
PassUpNode139984305080016 = Node('DirectDeclarator_0016', parent=PassUpNode139984305080144)
Identifier139984305079888 = Node('Identifier_9888', parent=PassUpNode139984305080016)
leaf = Node('a_9888', parent=Identifier139984305079888)
leaf = Node("Type='char', TokenLocation=(6, 43, 10)", parent=Identifier139984305079888)
PassUpNode139984305080464 = Node('Declarator_0464', parent=InitDeclList139984305080528)
PassUpNode139984305080336 = Node('DirectDeclarator_0336', parent=PassUpNode139984305080464)
Identifier139984305080272 = Node('Identifier_0272', parent=PassUpNode139984305080336)
leaf = Node('d_0272', parent=Identifier139984305080272)
leaf = Node("Type='char', TokenLocation=(6, 46, 13)", parent=Identifier139984305080272)
Declaration139984305082128 = Node('Declaration_2128', parent=DeclList139984305082064)
DeclarationSpecifiers139984305080720 = Node('DeclarationSpecifiers_0720', parent=Declaration139984305082128)
leaf = Node('int_0720', parent=DeclarationSpecifiers139984305080720)
InitDeclList139984305080976 = Node('InitDeclList_0976', parent=Declaration139984305082128)
PassUpNode139984305080784 = Node('Declarator_0784', parent=InitDeclList139984305080976)
ArrayDeclaration139984305082000 = Node('ArrayDeclaration_2000', parent=PassUpNode139984305080784)
PassUpNode139984305080656 = Node('DirectDeclarator_0656', parent=ArrayDeclaration139984305082000)
Identifier139984305080592 = Node('Identifier_0592', parent=PassUpNode139984305080656)
leaf = Node('arr_0592', parent=Identifier139984305080592)
leaf = Node("Type='int', TokenLocation=(8, 70, 9)", parent=Identifier139984305080592)
PassUpNode139984305081936 = Node('ConstantExpression_1936', parent=ArrayDeclaration139984305082000)
PassUpNode139984305081872 = Node('ConditionalExpression_1872', parent=PassUpNode139984305081936)
PassUpNode139984305081808 = Node('LogicalOrExpression_1808', parent=PassUpNode139984305081872)
PassUpNode139984305081744 = Node('LogicalAndExpression_1744', parent=PassUpNode139984305081808)
PassUpNode139984305081680 = Node('InclusiveOrExpression_1680', parent=PassUpNode139984305081744)
PassUpNode139984305081616 = Node('ExclusiveOrExpression_1616', parent=PassUpNode139984305081680)
PassUpNode139984305081552 = Node('AndExpression_1552', parent=PassUpNode139984305081616)
PassUpNode139984305081488 = Node('EqalityExpression_1488', parent=PassUpNode139984305081552)
PassUpNode139984305081424 = Node('ShiftExpression_1424', parent=PassUpNode139984305081488)
PassUpNode139984305081360 = Node('ShiftExpression_1360', parent=PassUpNode139984305081424)
PassUpNode139984305081296 = Node('AdditiveExpression_1296', parent=PassUpNode139984305081360)
PassUpNode139984305081232 = Node('MultiplicativeExpression_1232', parent=PassUpNode139984305081296)
PassUpNode139984305081168 = Node('CastExpression_1168', parent=PassUpNode139984305081232)
PassUpNode139984305081104 = Node('UnaryExpression_1104', parent=PassUpNode139984305081168)
PassUpNode139984305081040 = Node('PostfixExpression_1040', parent=PassUpNode139984305081104)
PrimaryExpression139984305080912 = Node('PrimaryExpression_0912', parent=PassUpNode139984305081040)
Constant139984305080848 = Node('Constant_0848', parent=PrimaryExpression139984305080912)
leaf = Node('10_0848', parent=Constant139984305080848)
PassUpNode139984305240208 = Node('StatementList_0208', parent=CompoundStatement139984305079440)
PassUpNode139984305238096 = Node('StatementList_8096', parent=PassUpNode139984305240208)
PassUpNode139984305215568 = Node('StatementList_5568', parent=PassUpNode139984305238096)
PassUpNode139984305213520 = Node('StatementList_3520', parent=PassUpNode139984305215568)
PassUpNode139984305191376 = Node('StatementList_1376', parent=PassUpNode139984305213520)
PassUpNode139984305082320 = Node('StatementList_2320', parent=PassUpNode139984305191376)
PassUpNode139984305082256 = Node('Statement_2256', parent=PassUpNode139984305082320)
SelectionStatement139984305189968 = Node('SelectionStatement_9968', parent=PassUpNode139984305082256)
PassUpNode139984305161936 = Node('Expression_1936', parent=SelectionStatement139984305189968)
PassUpNode139984305161872 = Node('AssignmentExpression_1872', parent=PassUpNode139984305161936)
PassUpNode139984305161808 = Node('ConditionalExpression_1808', parent=PassUpNode139984305161872)
PassUpNode139984305161744 = Node('LogicalOrExpression_1744', parent=PassUpNode139984305161808)
PassUpNode139984305161680 = Node('LogicalAndExpression_1680', parent=PassUpNode139984305161744)
PassUpNode139984305161616 = Node('InclusiveOrExpression_1616', parent=PassUpNode139984305161680)
PassUpNode139984305161552 = Node('ExclusiveOrExpression_1552', parent=PassUpNode139984305161616)
PassUpNode139984305161488 = Node('AndExpression_1488', parent=PassUpNode139984305161552)
PassUpNode139984305160336 = Node('EqalityExpression_0336', parent=PassUpNode139984305161488)
BinOp139984305161424 = Node('BinOp_1424', parent=PassUpNode139984305160336)
PassUpNode139984305160784 = Node('ShiftExpression_0784', parent=BinOp139984305161424)
PassUpNode139984305160720 = Node('ShiftExpression_0720', parent=PassUpNode139984305160784)
PassUpNode139984305160656 = Node('AdditiveExpression_0656', parent=PassUpNode139984305160720)
PassUpNode139984305160592 = Node('MultiplicativeExpression_0592', parent=PassUpNode139984305160656)
PassUpNode139984305160528 = Node('CastExpression_0528', parent=PassUpNode139984305160592)
PassUpNode139984305160464 = Node('UnaryExpression_0464', parent=PassUpNode139984305160528)
PassUpNode139984305160400 = Node('PostfixExpression_0400', parent=PassUpNode139984305160464)
PrimaryExpression139984305160272 = Node('PrimaryExpression_0272', parent=PassUpNode139984305160400)
Identifier139984305082192 = Node('Identifier_2192', parent=PrimaryExpression139984305160272)
leaf = Node('a_2192', parent=Identifier139984305082192)
leaf = Node("Type='char', TokenLocation=(6, 43, 10)", parent=Identifier139984305082192)
leaf = Node('<_1424', parent=BinOp139984305161424)
PassUpNode139984305161360 = Node('ShiftExpression_1360', parent=BinOp139984305161424)
PassUpNode139984305161296 = Node('AdditiveExpression_1296', parent=PassUpNode139984305161360)
PassUpNode139984305161232 = Node('MultiplicativeExpression_1232', parent=PassUpNode139984305161296)
PassUpNode139984305161168 = Node('CastExpression_1168', parent=PassUpNode139984305161232)
PassUpNode139984305161104 = Node('UnaryExpression_1104', parent=PassUpNode139984305161168)
PassUpNode139984305161040 = Node('PostfixExpression_1040', parent=PassUpNode139984305161104)
PrimaryExpression139984305160912 = Node('PrimaryExpression_0912', parent=PassUpNode139984305161040)
Identifier139984305160848 = Node('Identifier_0848', parent=PrimaryExpression139984305160912)
leaf = Node('d_0848', parent=Identifier139984305160848)
leaf = Node("Type='char', TokenLocation=(6, 46, 13)", parent=Identifier139984305160848)
PassUpNode139984305162064 = Node('Statement_2064', parent=SelectionStatement139984305189968)
CompoundStatement139984305162000 = Node('CompoundStatement_2000', parent=PassUpNode139984305162064)
DeclList139984305162320 = Node('DeclList_2320', parent=CompoundStatement139984305162000)
Declaration139984305162512 = Node('Declaration_2512', parent=DeclList139984305162320)
DeclarationSpecifiers139984305162192 = Node('DeclarationSpecifiers_2192', parent=Declaration139984305162512)
leaf = Node('int_2192', parent=DeclarationSpecifiers139984305162192)
InitDeclList139984305162448 = Node('InitDeclList_2448', parent=Declaration139984305162512)
PassUpNode139984305162384 = Node('Declarator_2384', parent=InitDeclList139984305162448)
PassUpNode139984305162256 = Node('DirectDeclarator_2256', parent=PassUpNode139984305162384)
Identifier139984305162128 = Node('Identifier_2128', parent=PassUpNode139984305162256)
leaf = Node('a4_2128', parent=Identifier139984305162128)
leaf = Node("Type='int', TokenLocation=(12, 118, 11)", parent=Identifier139984305162128)
PassUpNode139984305162704 = Node('Statement_2704', parent=SelectionStatement139984305189968)
CompoundStatement139984305162640 = Node('CompoundStatement_2640', parent=PassUpNode139984305162704)
DeclList139984305162960 = Node('DeclList_2960', parent=CompoundStatement139984305162640)
Declaration139984305163152 = Node('Declaration_3152', parent=DeclList139984305162960)
DeclarationSpecifiers139984305162832 = Node('DeclarationSpecifiers_2832', parent=Declaration139984305163152)
leaf = Node('int_2832', parent=DeclarationSpecifiers139984305162832)
InitDeclList139984305163088 = Node('InitDeclList_3088', parent=Declaration139984305163152)
PassUpNode139984305163024 = Node('Declarator_3024', parent=InitDeclList139984305163088)
PassUpNode139984305162896 = Node('DirectDeclarator_2896', parent=PassUpNode139984305163024)
Identifier139984305162768 = Node('Identifier_2768', parent=PassUpNode139984305162896)
leaf = Node('b6_2768', parent=Identifier139984305162768)
leaf = Node("Type='int', TokenLocation=(16, 147, 11)", parent=Identifier139984305162768)
PassUpNode139984305189840 = Node('StatementList_9840', parent=CompoundStatement139984305162640)
PassUpNode139984305164112 = Node('Statement_4112', parent=PassUpNode139984305189840)
PassUpNode139984305189776 = Node('Expression_9776', parent=PassUpNode139984305164112)
AssignmentExpression139984305189712 = Node('AssignmentExpression_9712', parent=PassUpNode139984305189776)
PassUpNode139984305163472 = Node('UnaryExpression_3472', parent=AssignmentExpression139984305189712)
PassUpNode139984305163408 = Node('PostfixExpression_3408', parent=PassUpNode139984305163472)
PrimaryExpression139984305163280 = Node('PrimaryExpression_3280', parent=PassUpNode139984305163408)
Identifier139984305163216 = Node('Identifier_3216', parent=PrimaryExpression139984305163280)
leaf = Node('b6_3216', parent=Identifier139984305163216)
leaf = Node("Type='int', TokenLocation=(16, 147, 11)", parent=Identifier139984305163216)
PassUpNode139984305189648 = Node('AssignmentExpression_9648', parent=AssignmentExpression139984305189712)
PassUpNode139984305189584 = Node('ConditionalExpression_9584', parent=PassUpNode139984305189648)
PassUpNode139984305189520 = Node('LogicalOrExpression_9520', parent=PassUpNode139984305189584)
PassUpNode139984305189456 = Node('LogicalAndExpression_9456', parent=PassUpNode139984305189520)
PassUpNode139984305189392 = Node('InclusiveOrExpression_9392', parent=PassUpNode139984305189456)
PassUpNode139984305189328 = Node('ExclusiveOrExpression_9328', parent=PassUpNode139984305189392)
PassUpNode139984305189264 = Node('AndExpression_9264', parent=PassUpNode139984305189328)
PassUpNode139984305189200 = Node('EqalityExpression_9200', parent=PassUpNode139984305189264)
PassUpNode139984305189136 = Node('ShiftExpression_9136', parent=PassUpNode139984305189200)
PassUpNode139984305163664 = Node('ShiftExpression_3664', parent=PassUpNode139984305189136)
BinOp139984305189072 = Node('BinOp_9072', parent=PassUpNode139984305163664)
PassUpNode139984305163920 = Node('AdditiveExpression_3920', parent=BinOp139984305189072)
PassUpNode139984305163856 = Node('MultiplicativeExpression_3856', parent=PassUpNode139984305163920)
PassUpNode139984305163792 = Node('CastExpression_3792', parent=PassUpNode139984305163856)
PassUpNode139984305163728 = Node('UnaryExpression_3728', parent=PassUpNode139984305163792)
PassUpNode139984305163536 = Node('PostfixExpression_3536', parent=PassUpNode139984305163728)
PrimaryExpression139984305163600 = Node('PrimaryExpression_3600', parent=PassUpNode139984305163536)
Constant139984305163344 = Node('Constant_3344', parent=PrimaryExpression139984305163600)
leaf = Node('4_3344', parent=Constant139984305163344)
leaf = Node('+_9072', parent=BinOp139984305189072)
PassUpNode139984305189008 = Node('MultiplicativeExpression_9008', parent=BinOp139984305189072)
PassUpNode139984305188944 = Node('CastExpression_8944', parent=PassUpNode139984305189008)
PassUpNode139984305164240 = Node('UnaryExpression_4240', parent=PassUpNode139984305188944)
PassUpNode139984305164176 = Node('PostfixExpression_4176', parent=PassUpNode139984305164240)
PrimaryExpression139984305164048 = Node('PrimaryExpression_4048', parent=PassUpNode139984305164176)
Constant139984305163984 = Node('Constant_3984', parent=PrimaryExpression139984305164048)
leaf = Node('2_3984', parent=Constant139984305163984)
PassUpNode139984305190288 = Node('Statement_0288', parent=PassUpNode139984305191376)
PassUpNode139984305191312 = Node('Expression_1312', parent=PassUpNode139984305190288)
AssignmentExpression139984305191248 = Node('AssignmentExpression_1248', parent=PassUpNode139984305191312)
PassUpNode139984305190096 = Node('UnaryExpression_0096', parent=AssignmentExpression139984305191248)
PassUpNode139984305189904 = Node('PostfixExpression_9904', parent=PassUpNode139984305190096)
PrimaryExpression139984305190032 = Node('PrimaryExpression_0032', parent=PassUpNode139984305189904)
Identifier139984305160976 = Node('Identifier_0976', parent=PrimaryExpression139984305190032)
leaf = Node('a_0976', parent=Identifier139984305160976)
leaf = Node("Type='char', TokenLocation=(6, 43, 10)", parent=Identifier139984305160976)
PassUpNode139984305191184 = Node('AssignmentExpression_1184', parent=AssignmentExpression139984305191248)
PassUpNode139984305191120 = Node('ConditionalExpression_1120', parent=PassUpNode139984305191184)
PassUpNode139984305191056 = Node('LogicalOrExpression_1056', parent=PassUpNode139984305191120)
PassUpNode139984305190992 = Node('LogicalAndExpression_0992', parent=PassUpNode139984305191056)
PassUpNode139984305190928 = Node('InclusiveOrExpression_0928', parent=PassUpNode139984305190992)
PassUpNode139984305190864 = Node('ExclusiveOrExpression_0864', parent=PassUpNode139984305190928)
PassUpNode139984305190800 = Node('AndExpression_0800', parent=PassUpNode139984305190864)
PassUpNode139984305190736 = Node('EqalityExpression_0736', parent=PassUpNode139984305190800)
PassUpNode139984305190672 = Node('ShiftExpression_0672', parent=PassUpNode139984305190736)
PassUpNode139984305190608 = Node('ShiftExpression_0608', parent=PassUpNode139984305190672)
PassUpNode139984305190544 = Node('AdditiveExpression_0544', parent=PassUpNode139984305190608)
PassUpNode139984305190480 = Node('MultiplicativeExpression_0480', parent=PassUpNode139984305190544)
PassUpNode139984305190416 = Node('CastExpression_0416', parent=PassUpNode139984305190480)
PassUpNode139984305190352 = Node('UnaryExpression_0352', parent=PassUpNode139984305190416)
PassUpNode139984305190160 = Node('PostfixExpression_0160', parent=PassUpNode139984305190352)
PrimaryExpression139984305190224 = Node('PrimaryExpression_0224', parent=PassUpNode139984305190160)
Constant139984305162576 = Node('Constant_2576', parent=PrimaryExpression139984305190224)
leaf = Node('1_2576', parent=Constant139984305162576)
PassUpNode139984305191888 = Node('Statement_1888', parent=PassUpNode139984305213520)
PassUpNode139984305192912 = Node('Expression_2912', parent=PassUpNode139984305191888)
AssignmentExpression139984305192848 = Node('AssignmentExpression_2848', parent=PassUpNode139984305192912)
PassUpNode139984305191696 = Node('UnaryExpression_1696', parent=AssignmentExpression139984305192848)
PassUpNode139984305191632 = Node('PostfixExpression_1632', parent=PassUpNode139984305191696)
PrimaryExpression139984305191504 = Node('PrimaryExpression_1504', parent=PassUpNode139984305191632)
Identifier139984305191440 = Node('Identifier_1440', parent=PrimaryExpression139984305191504)
leaf = Node('d_1440', parent=Identifier139984305191440)
leaf = Node("Type='char', TokenLocation=(6, 46, 13)", parent=Identifier139984305191440)
PassUpNode139984305192784 = Node('AssignmentExpression_2784', parent=AssignmentExpression139984305192848)
PassUpNode139984305192720 = Node('ConditionalExpression_2720', parent=PassUpNode139984305192784)
PassUpNode139984305192656 = Node('LogicalOrExpression_2656', parent=PassUpNode139984305192720)
PassUpNode139984305192592 = Node('LogicalAndExpression_2592', parent=PassUpNode139984305192656)
PassUpNode139984305192528 = Node('InclusiveOrExpression_2528', parent=PassUpNode139984305192592)
PassUpNode139984305192464 = Node('ExclusiveOrExpression_2464', parent=PassUpNode139984305192528)
PassUpNode139984305192400 = Node('AndExpression_2400', parent=PassUpNode139984305192464)
PassUpNode139984305192336 = Node('EqalityExpression_2336', parent=PassUpNode139984305192400)
PassUpNode139984305192272 = Node('ShiftExpression_2272', parent=PassUpNode139984305192336)
PassUpNode139984305192208 = Node('ShiftExpression_2208', parent=PassUpNode139984305192272)
PassUpNode139984305192144 = Node('AdditiveExpression_2144', parent=PassUpNode139984305192208)
PassUpNode139984305192080 = Node('MultiplicativeExpression_2080', parent=PassUpNode139984305192144)
PassUpNode139984305192016 = Node('CastExpression_2016', parent=PassUpNode139984305192080)
PassUpNode139984305191952 = Node('UnaryExpression_1952', parent=PassUpNode139984305192016)
PassUpNode139984305191760 = Node('PostfixExpression_1760', parent=PassUpNode139984305191952)
PrimaryExpression139984305191824 = Node('PrimaryExpression_1824', parent=PassUpNode139984305191760)
Constant139984305191568 = Node('Constant_1568', parent=PrimaryExpression139984305191824)
leaf = Node('3_1568', parent=Constant139984305191568)
PassUpNode139984305214480 = Node('Statement_4480', parent=PassUpNode139984305215568)
PassUpNode139984305215504 = Node('Expression_5504', parent=PassUpNode139984305214480)
AssignmentExpression139984305215440 = Node('AssignmentExpression_5440', parent=PassUpNode139984305215504)
PassUpNode139984305213840 = Node('UnaryExpression_3840', parent=AssignmentExpression139984305215440)
PassUpNode139984305213776 = Node('PostfixExpression_3776', parent=PassUpNode139984305213840)
PrimaryExpression139984305213648 = Node('PrimaryExpression_3648', parent=PassUpNode139984305213776)
Identifier139984305213584 = Node('Identifier_3584', parent=PrimaryExpression139984305213648)
leaf = Node('g_3584', parent=Identifier139984305213584)
PassUpNode139984305215376 = Node('AssignmentExpression_5376', parent=AssignmentExpression139984305215440)
PassUpNode139984305215312 = Node('ConditionalExpression_5312', parent=PassUpNode139984305215376)
PassUpNode139984305215248 = Node('LogicalOrExpression_5248', parent=PassUpNode139984305215312)
PassUpNode139984305215184 = Node('LogicalAndExpression_5184', parent=PassUpNode139984305215248)
PassUpNode139984305215120 = Node('InclusiveOrExpression_5120', parent=PassUpNode139984305215184)
PassUpNode139984305215056 = Node('ExclusiveOrExpression_5056', parent=PassUpNode139984305215120)
PassUpNode139984305214992 = Node('AndExpression_4992', parent=PassUpNode139984305215056)
PassUpNode139984305214928 = Node('EqalityExpression_4928', parent=PassUpNode139984305214992)
PassUpNode139984305214864 = Node('ShiftExpression_4864', parent=PassUpNode139984305214928)
PassUpNode139984305214032 = Node('ShiftExpression_4032', parent=PassUpNode139984305214864)
BinOp139984305214800 = Node('BinOp_4800', parent=PassUpNode139984305214032)
PassUpNode139984305214288 = Node('AdditiveExpression_4288', parent=BinOp139984305214800)
PassUpNode139984305214224 = Node('MultiplicativeExpression_4224', parent=PassUpNode139984305214288)
PassUpNode139984305214160 = Node('CastExpression_4160', parent=PassUpNode139984305214224)
PassUpNode139984305214096 = Node('UnaryExpression_4096', parent=PassUpNode139984305214160)
PassUpNode139984305213904 = Node('PostfixExpression_3904', parent=PassUpNode139984305214096)
PrimaryExpression139984305213968 = Node('PrimaryExpression_3968', parent=PassUpNode139984305213904)
Constant139984305213712 = Node('Constant_3712', parent=PrimaryExpression139984305213968)
leaf = Node('2_3712', parent=Constant139984305213712)
leaf = Node('+_4800', parent=BinOp139984305214800)
PassUpNode139984305214736 = Node('MultiplicativeExpression_4736', parent=BinOp139984305214800)
PassUpNode139984305214672 = Node('CastExpression_4672', parent=PassUpNode139984305214736)
PassUpNode139984305214608 = Node('UnaryExpression_4608', parent=PassUpNode139984305214672)
PassUpNode139984305214544 = Node('PostfixExpression_4544', parent=PassUpNode139984305214608)
PrimaryExpression139984305214416 = Node('PrimaryExpression_4416', parent=PassUpNode139984305214544)
Constant139984305214352 = Node('Constant_4352', parent=PrimaryExpression139984305214416)
leaf = Node('3_4352', parent=Constant139984305214352)
PassUpNode139984305216464 = Node('Statement_6464', parent=PassUpNode139984305238096)
PassUpNode139984305217488 = Node('Expression_7488', parent=PassUpNode139984305216464)
AssignmentExpression139984305217424 = Node('AssignmentExpression_7424', parent=PassUpNode139984305217488)
PassUpNode139984305215888 = Node('UnaryExpression_5888', parent=AssignmentExpression139984305217424)
PassUpNode139984305215824 = Node('PostfixExpression_5824', parent=PassUpNode139984305215888)
PrimaryExpression139984305215696 = Node('PrimaryExpression_5696', parent=PassUpNode139984305215824)
Identifier139984305215632 = Node('Identifier_5632', parent=PrimaryExpression139984305215696)
leaf = Node('d_5632', parent=Identifier139984305215632)
leaf = Node("Type='char', TokenLocation=(6, 46, 13)", parent=Identifier139984305215632)
PassUpNode139984305217360 = Node('AssignmentExpression_7360', parent=AssignmentExpression139984305217424)
PassUpNode139984305217296 = Node('ConditionalExpression_7296', parent=PassUpNode139984305217360)
PassUpNode139984305217232 = Node('LogicalOrExpression_7232', parent=PassUpNode139984305217296)
PassUpNode139984305217168 = Node('LogicalAndExpression_7168', parent=PassUpNode139984305217232)
PassUpNode139984305217104 = Node('InclusiveOrExpression_7104', parent=PassUpNode139984305217168)
PassUpNode139984305217040 = Node('ExclusiveOrExpression_7040', parent=PassUpNode139984305217104)
PassUpNode139984305216976 = Node('AndExpression_6976', parent=PassUpNode139984305217040)
PassUpNode139984305216912 = Node('EqalityExpression_6912', parent=PassUpNode139984305216976)
PassUpNode139984305216848 = Node('ShiftExpression_6848', parent=PassUpNode139984305216912)
PassUpNode139984305216784 = Node('ShiftExpression_6784', parent=PassUpNode139984305216848)
PassUpNode139984305216080 = Node('AdditiveExpression_6080', parent=PassUpNode139984305216784)
BinOp139984305216720 = Node('BinOp_6720', parent=PassUpNode139984305216080)
PassUpNode139984305216272 = Node('MultiplicativeExpression_6272', parent=BinOp139984305216720)
PassUpNode139984305216208 = Node('CastExpression_6208', parent=PassUpNode139984305216272)
PassUpNode139984305216144 = Node('UnaryExpression_6144', parent=PassUpNode139984305216208)
PassUpNode139984305215952 = Node('PostfixExpression_5952', parent=PassUpNode139984305216144)
PrimaryExpression139984305216016 = Node('PrimaryExpression_6016', parent=PassUpNode139984305215952)
Constant139984305215760 = Node('Constant_5760', parent=PrimaryExpression139984305216016)
leaf = Node('5_5760', parent=Constant139984305215760)
leaf = Node('*_6720', parent=BinOp139984305216720)
PassUpNode139984305216656 = Node('CastExpression_6656', parent=BinOp139984305216720)
PassUpNode139984305216592 = Node('UnaryExpression_6592', parent=PassUpNode139984305216656)
PassUpNode139984305216528 = Node('PostfixExpression_6528', parent=PassUpNode139984305216592)
PrimaryExpression139984305216400 = Node('PrimaryExpression_6400', parent=PassUpNode139984305216528)
Constant139984305216336 = Node('Constant_6336', parent=PrimaryExpression139984305216400)
leaf = Node('5_6336', parent=Constant139984305216336)
PassUpNode139984305239120 = Node('Statement_9120', parent=PassUpNode139984305240208)
PassUpNode139984305240144 = Node('Expression_0144', parent=PassUpNode139984305239120)
AssignmentExpression139984305240080 = Node('AssignmentExpression_0080', parent=PassUpNode139984305240144)
PassUpNode139984305238416 = Node('UnaryExpression_8416', parent=AssignmentExpression139984305240080)
PassUpNode139984305238352 = Node('PostfixExpression_8352', parent=PassUpNode139984305238416)
PrimaryExpression139984305238224 = Node('PrimaryExpression_8224', parent=PassUpNode139984305238352)
Identifier139984305238160 = Node('Identifier_8160', parent=PrimaryExpression139984305238224)
leaf = Node('d_8160', parent=Identifier139984305238160)
leaf = Node("Type='char', TokenLocation=(6, 46, 13)", parent=Identifier139984305238160)
PassUpNode139984305240016 = Node('AssignmentExpression_0016', parent=AssignmentExpression139984305240080)
PassUpNode139984305239952 = Node('ConditionalExpression_9952', parent=PassUpNode139984305240016)
PassUpNode139984305239888 = Node('LogicalOrExpression_9888', parent=PassUpNode139984305239952)
PassUpNode139984305239824 = Node('LogicalAndExpression_9824', parent=PassUpNode139984305239888)
PassUpNode139984305239760 = Node('InclusiveOrExpression_9760', parent=PassUpNode139984305239824)
PassUpNode139984305239696 = Node('ExclusiveOrExpression_9696', parent=PassUpNode139984305239760)
PassUpNode139984305239632 = Node('AndExpression_9632', parent=PassUpNode139984305239696)
PassUpNode139984305239568 = Node('EqalityExpression_9568', parent=PassUpNode139984305239632)
PassUpNode139984305238608 = Node('ShiftExpression_8608', parent=PassUpNode139984305239568)
BinOp139984305239504 = Node('BinOp_9504', parent=PassUpNode139984305238608)
PassUpNode139984305238928 = Node('ShiftExpression_8928', parent=BinOp139984305239504)
PassUpNode139984305238864 = Node('AdditiveExpression_8864', parent=PassUpNode139984305238928)
PassUpNode139984305238800 = Node('MultiplicativeExpression_8800', parent=PassUpNode139984305238864)
PassUpNode139984305238736 = Node('CastExpression_8736', parent=PassUpNode139984305238800)
PassUpNode139984305238672 = Node('UnaryExpression_8672', parent=PassUpNode139984305238736)
PassUpNode139984305238480 = Node('PostfixExpression_8480', parent=PassUpNode139984305238672)
PrimaryExpression139984305238544 = Node('PrimaryExpression_8544', parent=PassUpNode139984305238480)
Identifier139984305238288 = Node('Identifier_8288', parent=PrimaryExpression139984305238544)
leaf = Node('d_8288', parent=Identifier139984305238288)
leaf = Node("Type='char', TokenLocation=(6, 46, 13)", parent=Identifier139984305238288)
leaf = Node('>>_9504', parent=BinOp139984305239504)
PassUpNode139984305239440 = Node('AdditiveExpression_9440', parent=BinOp139984305239504)
PassUpNode139984305239376 = Node('MultiplicativeExpression_9376', parent=PassUpNode139984305239440)
PassUpNode139984305239312 = Node('CastExpression_9312', parent=PassUpNode139984305239376)
PassUpNode139984305239248 = Node('UnaryExpression_9248', parent=PassUpNode139984305239312)
PassUpNode139984305239184 = Node('PostfixExpression_9184', parent=PassUpNode139984305239248)
PrimaryExpression139984305239056 = Node('PrimaryExpression_9056', parent=PassUpNode139984305239184)
Constant139984305238992 = Node('Constant_8992', parent=PrimaryExpression139984305239056)
leaf = Node('5_8992', parent=Constant139984305238992)

for pre, fill, node in RenderTree(PassUpNode139984305240272):
    if "TokenLocation" in node.name: print("%s%s" % (pre, node.name))
    else: print("%s%s" % (pre, node.name[:-5]) )

    
def f(node):
    if node.is_leaf and "TokenLocation" in node.name:
        return 'label="%s"' % (node.name)
    return 'label="%s"' % (node.name[:-5])

DotExporter(PassUpNode139984305240272, nodeattrfunc=f).to_picture("AST.png")
        