from anytree import Node, RenderTree 
from anytree.exporter import DotExporter
PassUpNode140028669068688 = Node('TranslationUnit_8688')
PassUpNode140028669068752 = Node('ExternalDeclaration_8752', parent=PassUpNode140028669068688)
FunctionDefintion140028668971344 = Node('FunctionDefintion_1344', parent=PassUpNode140028669068752)
DeclarationSpecifiers140028672492944 = Node('DeclarationSpecifiers_2944', parent=FunctionDefintion140028668971344)
leaf = Node('int_2944', parent=DeclarationSpecifiers140028672492944)
PassUpNode140028672580944 = Node('Declarator_0944', parent=FunctionDefintion140028668971344)
PassUpNode140028668971152 = Node('DirectDeclarator_1152', parent=PassUpNode140028672580944)
PassUpNode140028672577744 = Node('DirectDeclarator_7744', parent=PassUpNode140028668971152)
Identifier140028672492880 = Node('Identifier_2880', parent=PassUpNode140028672577744)
leaf = Node('main_2880', parent=Identifier140028672492880)
leaf = Node("TokenLocation=(1, 4, 5)", parent=Identifier140028672492880)
CompoundStatement140028668971216 = Node('CompoundStatement_1216', parent=FunctionDefintion140028668971344)
DeclList140028669023760 = Node('DeclList_3760', parent=CompoundStatement140028668971216)
DeclList140028669023184 = Node('DeclList_3184', parent=DeclList140028669023760)
Declaration140028669023248 = Node('Declaration_3248', parent=DeclList140028669023184)
DeclarationSpecifiers140028668971408 = Node('DeclarationSpecifiers_1408', parent=Declaration140028669023248)
leaf = Node('int_1408', parent=DeclarationSpecifiers140028668971408)
InitDeclList140028668973008 = Node('InitDeclList_3008', parent=Declaration140028669023248)
PassUpNode140028668972816 = Node('Declarator_2816', parent=InitDeclList140028668973008)
ArrayDeclaration140028669023120 = Node('ArrayDeclaration_3120', parent=PassUpNode140028668972816)
ArrayDeclaration140028668972752 = Node('ArrayDeclaration_2752', parent=ArrayDeclaration140028669023120)
PassUpNode140028668971472 = Node('DirectDeclarator_1472', parent=ArrayDeclaration140028668972752)
Identifier140028668971280 = Node('Identifier_1280', parent=PassUpNode140028668971472)
leaf = Node('arr_1280', parent=Identifier140028668971280)
leaf = Node("Array Size=['2', '3'], Subtype='Array', Type=['int'], TokenLocation=(3, 18, 6)", parent=Identifier140028668971280)
PassUpNode140028668972688 = Node('ConstantExpression_2688', parent=ArrayDeclaration140028668972752)
PassUpNode140028668972624 = Node('ConditionalExpression_2624', parent=PassUpNode140028668972688)
PassUpNode140028668972560 = Node('LogicalOrExpression_2560', parent=PassUpNode140028668972624)
PassUpNode140028668972496 = Node('LogicalAndExpression_2496', parent=PassUpNode140028668972560)
PassUpNode140028668972432 = Node('InclusiveOrExpression_2432', parent=PassUpNode140028668972496)
PassUpNode140028668972368 = Node('ExclusiveOrExpression_2368', parent=PassUpNode140028668972432)
PassUpNode140028668972304 = Node('AndExpression_2304', parent=PassUpNode140028668972368)
PassUpNode140028668972240 = Node('EqalityExpression_2240', parent=PassUpNode140028668972304)
PassUpNode140028668972176 = Node('ShiftExpression_2176', parent=PassUpNode140028668972240)
PassUpNode140028668972112 = Node('ShiftExpression_2112', parent=PassUpNode140028668972176)
PassUpNode140028668972048 = Node('AdditiveExpression_2048', parent=PassUpNode140028668972112)
PassUpNode140028668971984 = Node('MultiplicativeExpression_1984', parent=PassUpNode140028668972048)
PassUpNode140028668971920 = Node('CastExpression_1920', parent=PassUpNode140028668971984)
PassUpNode140028668971856 = Node('UnaryExpression_1856', parent=PassUpNode140028668971920)
PassUpNode140028668971792 = Node('PostfixExpression_1792', parent=PassUpNode140028668971856)
PrimaryExpression140028668971664 = Node('PrimaryExpression_1664', parent=PassUpNode140028668971792)
Constant140028668971600 = Node('Constant_1600', parent=PrimaryExpression140028668971664)
leaf = Node('2_1600', parent=Constant140028668971600)
PassUpNode140028669023056 = Node('ConstantExpression_3056', parent=ArrayDeclaration140028669023120)
PassUpNode140028669022992 = Node('ConditionalExpression_2992', parent=PassUpNode140028669023056)
PassUpNode140028669022928 = Node('LogicalOrExpression_2928', parent=PassUpNode140028669022992)
PassUpNode140028669022864 = Node('LogicalAndExpression_2864', parent=PassUpNode140028669022928)
PassUpNode140028669022800 = Node('InclusiveOrExpression_2800', parent=PassUpNode140028669022864)
PassUpNode140028669022736 = Node('ExclusiveOrExpression_2736', parent=PassUpNode140028669022800)
PassUpNode140028669022672 = Node('AndExpression_2672', parent=PassUpNode140028669022736)
PassUpNode140028669022608 = Node('EqalityExpression_2608', parent=PassUpNode140028669022672)
PassUpNode140028669022544 = Node('ShiftExpression_2544', parent=PassUpNode140028669022608)
PassUpNode140028669022480 = Node('ShiftExpression_2480', parent=PassUpNode140028669022544)
PassUpNode140028669022416 = Node('AdditiveExpression_2416', parent=PassUpNode140028669022480)
PassUpNode140028669022352 = Node('MultiplicativeExpression_2352', parent=PassUpNode140028669022416)
PassUpNode140028669022288 = Node('CastExpression_2288', parent=PassUpNode140028669022352)
PassUpNode140028668972880 = Node('UnaryExpression_2880', parent=PassUpNode140028669022288)
PassUpNode140028668971728 = Node('PostfixExpression_1728', parent=PassUpNode140028668972880)
PrimaryExpression140028668972944 = Node('PrimaryExpression_2944', parent=PassUpNode140028668971728)
Constant140028668971536 = Node('Constant_1536', parent=PrimaryExpression140028668972944)
leaf = Node('3_1536', parent=Constant140028668971536)
Declaration140028669023440 = Node('Declaration_3440', parent=DeclList140028669023760)
DeclarationSpecifiers140028669023376 = Node('DeclarationSpecifiers_3376', parent=Declaration140028669023440)
leaf = Node('int_3376', parent=DeclarationSpecifiers140028669023376)
InitDeclList140028669023568 = Node('InitDeclList_3568', parent=Declaration140028669023440)
PassUpNode140028669068624 = Node('StatementList_8624', parent=CompoundStatement140028668971216)
PassUpNode140028669067536 = Node('Statement_7536', parent=PassUpNode140028669068624)
PassUpNode140028669068560 = Node('Expression_8560', parent=PassUpNode140028669067536)
AssignmentExpression140028669068496 = Node('AssignmentExpression_8496', parent=PassUpNode140028669068560)
PassUpNode140028669025104 = Node('UnaryExpression_5104', parent=AssignmentExpression140028669068496)
ArrayAccess140028669067344 = Node('ArrayAccess_7344', parent=PassUpNode140028669025104)
PassUpNode140028669026256 = Node('Expression_6256', parent=ArrayAccess140028669067344)
PassUpNode140028669026192 = Node('AssignmentExpression_6192', parent=PassUpNode140028669026256)
PassUpNode140028669026128 = Node('ConditionalExpression_6128', parent=PassUpNode140028669026192)
PassUpNode140028669026064 = Node('LogicalOrExpression_6064', parent=PassUpNode140028669026128)
PassUpNode140028669026000 = Node('LogicalAndExpression_6000', parent=PassUpNode140028669026064)
PassUpNode140028669025936 = Node('InclusiveOrExpression_5936', parent=PassUpNode140028669026000)
PassUpNode140028669025872 = Node('ExclusiveOrExpression_5872', parent=PassUpNode140028669025936)
PassUpNode140028669025808 = Node('AndExpression_5808', parent=PassUpNode140028669025872)
PassUpNode140028669025744 = Node('EqalityExpression_5744', parent=PassUpNode140028669025808)
PassUpNode140028669025680 = Node('ShiftExpression_5680', parent=PassUpNode140028669025744)
PassUpNode140028669025616 = Node('ShiftExpression_5616', parent=PassUpNode140028669025680)
PassUpNode140028669025552 = Node('AdditiveExpression_5552', parent=PassUpNode140028669025616)
PassUpNode140028669025488 = Node('MultiplicativeExpression_5488', parent=PassUpNode140028669025552)
PassUpNode140028669025424 = Node('CastExpression_5424', parent=PassUpNode140028669025488)
PassUpNode140028669025168 = Node('UnaryExpression_5168', parent=PassUpNode140028669025424)
PassUpNode140028669024528 = Node('PostfixExpression_4528', parent=PassUpNode140028669025168)
PrimaryExpression140028669025296 = Node('PrimaryExpression_5296', parent=PassUpNode140028669024528)
Identifier140028669023632 = Node('Identifier_3632', parent=PrimaryExpression140028669025296)
leaf = Node('a_3632', parent=Identifier140028669023632)
leaf = Node("TokenLocation=(4, 34, 6)", parent=Identifier140028669023632)
ArrayAccess140028669025040 = Node('ArrayAccess_5040', parent=ArrayAccess140028669067344)
PassUpNode140028669024976 = Node('Expression_4976', parent=ArrayAccess140028669025040)
PassUpNode140028669024912 = Node('AssignmentExpression_4912', parent=PassUpNode140028669024976)
PassUpNode140028669024848 = Node('ConditionalExpression_4848', parent=PassUpNode140028669024912)
PassUpNode140028669024784 = Node('LogicalOrExpression_4784', parent=PassUpNode140028669024848)
PassUpNode140028669023696 = Node('LogicalAndExpression_3696', parent=PassUpNode140028669024784)
PassUpNode140028669023824 = Node('InclusiveOrExpression_3824', parent=PassUpNode140028669023696)
PassUpNode140028669023888 = Node('ExclusiveOrExpression_3888', parent=PassUpNode140028669023824)
PassUpNode140028669023952 = Node('AndExpression_3952', parent=PassUpNode140028669023888)
PassUpNode140028669024016 = Node('EqalityExpression_4016', parent=PassUpNode140028669023952)
PassUpNode140028669024080 = Node('ShiftExpression_4080', parent=PassUpNode140028669024016)
PassUpNode140028669024144 = Node('ShiftExpression_4144', parent=PassUpNode140028669024080)
PassUpNode140028669024208 = Node('AdditiveExpression_4208', parent=PassUpNode140028669024144)
PassUpNode140028669024272 = Node('MultiplicativeExpression_4272', parent=PassUpNode140028669024208)
PassUpNode140028669024336 = Node('CastExpression_4336', parent=PassUpNode140028669024272)
PassUpNode140028669024400 = Node('UnaryExpression_4400', parent=PassUpNode140028669024336)
PassUpNode140028669024464 = Node('PostfixExpression_4464', parent=PassUpNode140028669024400)
PrimaryExpression140028669024592 = Node('PrimaryExpression_4592', parent=PassUpNode140028669024464)
Constant140028669024656 = Node('Constant_4656', parent=PrimaryExpression140028669024592)
leaf = Node('1.1_4656', parent=Constant140028669024656)
PassUpNode140028669024720 = Node('PostfixExpression_4720', parent=ArrayAccess140028669025040)
PrimaryExpression140028669023504 = Node('PrimaryExpression_3504', parent=PassUpNode140028669024720)
Identifier140028669023312 = Node('Identifier_3312', parent=PrimaryExpression140028669023504)
leaf = Node('arr_3312', parent=Identifier140028669023312)
leaf = Node("Array Size=['2', '3'], Subtype='Array', Type=['int'], TokenLocation=(3, 18, 6)", parent=Identifier140028669023312)
leaf = Node('2 3 _5040', parent=ArrayAccess140028669025040)
leaf = Node('1.1_5040', parent=ArrayAccess140028669025040)
leaf = Node('2 3 _7344', parent=ArrayAccess140028669067344)
leaf = Node('a_7344', parent=ArrayAccess140028669067344)
PassUpNode140028669068432 = Node('AssignmentExpression_8432', parent=AssignmentExpression140028669068496)
PassUpNode140028669068368 = Node('ConditionalExpression_8368', parent=PassUpNode140028669068432)
PassUpNode140028669068304 = Node('LogicalOrExpression_8304', parent=PassUpNode140028669068368)
PassUpNode140028669068240 = Node('LogicalAndExpression_8240', parent=PassUpNode140028669068304)
PassUpNode140028669068176 = Node('InclusiveOrExpression_8176', parent=PassUpNode140028669068240)
PassUpNode140028669068112 = Node('ExclusiveOrExpression_8112', parent=PassUpNode140028669068176)
PassUpNode140028669068048 = Node('AndExpression_8048', parent=PassUpNode140028669068112)
PassUpNode140028669067984 = Node('EqalityExpression_7984', parent=PassUpNode140028669068048)
PassUpNode140028669067920 = Node('ShiftExpression_7920', parent=PassUpNode140028669067984)
PassUpNode140028669067856 = Node('ShiftExpression_7856', parent=PassUpNode140028669067920)
PassUpNode140028669067792 = Node('AdditiveExpression_7792', parent=PassUpNode140028669067856)
PassUpNode140028669067728 = Node('MultiplicativeExpression_7728', parent=PassUpNode140028669067792)
PassUpNode140028669067664 = Node('CastExpression_7664', parent=PassUpNode140028669067728)
PassUpNode140028669067600 = Node('UnaryExpression_7600', parent=PassUpNode140028669067664)
PassUpNode140028669067408 = Node('PostfixExpression_7408', parent=PassUpNode140028669067600)
PrimaryExpression140028669067472 = Node('PrimaryExpression_7472', parent=PassUpNode140028669067408)
Constant140028669025360 = Node('Constant_5360', parent=PrimaryExpression140028669067472)
leaf = Node('3_5360', parent=Constant140028669025360)

for pre, fill, node in RenderTree(PassUpNode140028669068688):
    if "TokenLocation" in node.name: print("%s%s" % (pre, node.name))
    else: print("%s%s" % (pre, node.name[:-5]) )

    
def f(node):
    if node.is_leaf and "TokenLocation" in node.name:
        return 'label="%s"' % (node.name)
    return 'label="%s"' % (node.name[:-5])

DotExporter(PassUpNode140028669068688, nodeattrfunc=f).to_picture("AST.png")
        